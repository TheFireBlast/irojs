################
##  RedLapis  ##
################

name	 			= redlapis
file_extensions []	= rl;

## Constants ##
__Identifier	\= [a-zA-Z_][a-zA-Z_0-9]*
__NUM			\= [+-]?\d*\.?\d+
__NID           \= [a-zA-Z0-9_.-]+
__NAMESPACE     \= $${__NID}:$${__NID}(/$${__NID})*

## Contexts ##
contexts [] {

main : context {
	// Controls
	: pattern {
		regex		\= \b(while|if|else|as|at|return)\b(a)
		styles []	 = .control;
	}
	// New
	: inline_push {
		regex		\= (new\s+)($${__Identifier}\s*)(\()
		styles []	 = .keyword, .class, .punctuation;
		: pop {
			regex		\= (\))
			styles []	 = .punctuation;
		}
		: include "expression" ;
		: pattern {
			regex		\= ($${__Identifier})
			styles []	 = .identifier;
		}
		: include "common" ;
	}
	// FunctionDeclaration
	: inline_push {
		regex		\= ($${__Identifier}\s+)($${__Identifier}\s*)(\()
		styles []	 = .type, .function, .punctuation;
		: pop {
			regex		\= (\))
			styles []	 = .punctuation;
		}
		: pattern {
			regex		\= \b(const)\b
			styles []	 = .modifier;
		}
		: pattern {
			regex		\= ($${__Identifier})(\s+$${__Identifier})
			styles []	 = .type, .parameter;
		}
		: pattern {
			regex		\= (,)
			styles []	 = .punctuation;
		}
	}
	// VariableDeclaraction
	: pattern {
		regex		\= ($${__Identifier}\ s+)($${__Identifier}\s*)(=)
		styles []	 = .type, .identifier, .operator;
	}
	// Primitive Types
	: pattern {//TODO: revise primitives
		regex		\= \b(void|string|int|float|position|selector|bool|item)\b
		styles []	 = .type_primitive;
	}
	// Namespace / Class
	: pattern {
		regex		\= (namespace\s+|class\s+)($${__Identifier})
		styles []	 = .type, .class;
	}
	: pattern {
		regex		\= (namespace|class)
		styles []	 = .type;
	}
	// Modifier
	: pattern {
		regex		\= \b(const|export|static|extern|public|private|protected)\b
		styles []	 = .modifier;
	}
	// Command
	: inline_push {
		regex		\= (/$${__Identifier})
		styles []	 = .command;
		: eol_pop ;
		: include "expression" ;
		: inline_push { // Placeholders
			regex		\= (\${\s*)
			styles []	 = .punctuation;
			: pop {
				regex		\= (\s*})
				styles []	 = .punctuation;
			}
			: pattern {
				regex		\= ($${__Identifier})
				styles []	 = .identifier;
			}
			: include "expression" ;
			: include "common" ;
		}
		: include "json" ;
		: pattern {
			regex		\= ($${__Identifier})
			styles []	 = .command_arg;
		}
		: pattern {
			regex		\= ([\$\(\)\{\}\[\].,=<>+-/*])
			styles []	 = .command_arg;
		}
	}
	// Directives
	: pattern {
		regex		\= (#define\s*)($${__Identifier})
		styles []	 = .control, .function;
	}
	: pattern {
		regex		\= (#define)
		styles []	 = .control;
	}
	: pattern {
		regex		\= (#include\s*)(<)([^>]+)(>)
		styles []	 = .control, .punctuation, .text, .punctuation;
	}
	: pattern {
		regex		\= (#include)
		styles []	 = .control;
	}
	: pattern {
		regex		\= (#$${__Identifier})
		styles []	 = .control;
	}
	
	: include "comment" ;
	: include "expression" ;
	: include "common" ;
	: pattern {
		regex		\= ($${__Identifier})
		styles []	 = .identifier;
	}
}

comment : context {
	// Comment
	: pattern {
		regex		\= (//.*)
		styles []	 = .comment;
	}
	: inline_push {
		regex		\= (/\*)
		styles []	 = .comment;
		default_style	 = .comment
		: pop {
			regex		\= (\*/)
			styles []	 = .comment;
		}
	}
}

// JSON / NBT
json : context {
	: inline_push {
		regex		\= (\{)
		styles []	 = .punctuation;
		: pop {
			regex		\= (\})
			styles []	 = .punctuation;
		}
		: include "json";
	}
	: inline_push {
		regex		\= (\[)
		styles []	 = .punctuation;
		: pop {
			regex		\= (\])
			styles []	 = .punctuation;
		}
		: include "json";
	}
// 	: pattern {
// 		regex		\= ($${__Identifier})(\:)
// 		styles []	 = .identifier, .punctuation;
// 	}
	: pattern {
		regex		\= ([,:])
		styles []	 = .punctuation;
	}
	//: include "comment" ;
	: include "expression" ;
	: include "common" ;
}

// Expressions
expression : context {
	// self identifier (not this)
	: pattern {
		regex		\= \b(self)\b
		styles []	 = .self;
	}
	// special names
	// : pattern {
	//	regex		\= \b(Game)\b
	//	styles []	 = .special_name;
	// }
	// FunctionCall
	: inline_push {
		regex		\= ($${__Identifier}\s*)(\()
		styles []	 = .function, .punctuation;
		: pop {
			regex		\= (\))
			styles []	 = .punctuation;
		}
		: include "expression" ;
		: pattern {
			regex		\= ($${__Identifier})
			styles []	 = .identifier;
		}
		: include "common" ;
	}
	// Range
	: pattern {
		regex		\= ($${__NUM})(\.\.)($${__NUM})
		styles []	 = .numeric, .punctuation, .numeric;
	}
	: pattern {
		regex		\= (\.\.)($${__NUM})
		styles []	 = .punctuation, .numeric;
	}
	: pattern {
		regex		\= ($${__NUM})(\.\.)
		styles []	 = .numeric, .punctuation;
	}
	// Number / Position
	: pattern {
		regex		\= ([~^]$${__NUM}|$${__NUM}[bdfils]?|[~^])
		styles []	 = .numeric;
	}
	// Boolean
	: pattern {
		regex		\= (true|false)
		styles []	 = .bool;
	}
	// JSONNamespace (Item/Block with blockdata)
	: inline_push {
		regex		\= ($${__NAMESPACE})({)
		styles []	 = .namespace, .punctuation;
		: pop {
			regex		\= (})
			styles []	 = .punctuation;
		}
		: include "json";
	}
	// Minecraft Namespace
	: pattern {
		regex		\= (#?$${__NAMESPACE})
		styles []	 = .namespace;
	}
    // Scope Access
	: pattern {
		regex		\= ($${__Identifier})(::)
		styles []	 = .class, .punctuation;
	}
	// Identifier
	//MOVED (should not use ".identifier" if inside command context but)
	// String (Double Quote)
	: inline_push {
		regex		\= (")
		styles []	 = .punctuation;
		: pop {
			regex		\= ("|$)
			styles []	 = .punctuation;
		}
		: pattern {
			regex		\= (\\[a-zA-Z0-9\\"])
			styles []	 = .escape_char;
		}
		: pattern {
			regex		\= ([^"\\]+)
			styles []	 = .text;
		}
	}
	// String (Single Quote)
	: inline_push {
		regex		\= (')
			styles []	 = .punctuation;
		: pop {
			regex		\= ('|$)
			styles []	 = .punctuation;
		}
		: pattern {
			regex		\= (\\[a-zA-Z0-9\\'])
			styles []	 = .escape_char;
		}
		: pattern {
			regex		\= ([^'\\]+)
			styles []	 = .text;
		}
	}
	// Selector (With Options)
	: inline_push {
		regex		\= (@[parse])(\[)
		styles []	 = .selector, .punctuation;
		: pop {
			regex		\= (\])
			styles []	 = .punctuation;
		}
		: pattern {
			regex		\= ([a-z_]+)(\s*=\s*)(!?)($${__Identifier}:$${__Identifier}|$${__Identifier})
			styles []	 = .identifier, .operator, .operator, .text;
		}
		: pattern {
			regex		\= ([a-z_]+)(\s*=\s*)
			styles []	 = .identifier, .operator;
		}
		: pattern {
			regex		\= (,)
			styles []	 = .punctuation;
		}
		: pattern {
			regex		\= ($${__Identifier})
			styles []	 = .identifier;
		}
		: include "expression";
		: include "common" ;
	}
	// Selector (Simple)
	: pattern {
		regex		\= (@[parse])
		styles []	 = .selector;
	}
}

common : context {
	: include "comment" ;
	// Operators
	: pattern {
		regex		\= ([\-+=<>/*&|%!:])
		styles []	 = .operator;
	}
	// Punctuation
	: pattern {
		regex		\= ([\$\(\){}\[\].,;])
		styles []	 = .punctuation;
	}
}

}

## Styles ##
styles [] {

.control : style {
	color			= #89ddff
	italic			= true
	textmate_scope	= keyword.control
}
.keyword : style {
	color			= #C792EA
	textmate_scope	= keyword
}
.class : style {
	color			= #FFCB6B
	textmate_scope	= entity.name
}
// .special : style {
// 	color			= #F78C6C
// 	italic			= true
// 	textmate_scope	= keyword.other
// }
.comment : style {
	color			= #4A4A4A
	italic	= true
	textmate_scope	= comment
}
.operator : style {
	color			= #C792EA
	textmate_scope	= keyword.operator
}
.selector : style {
	color			= #C792EA
	textmate_scope	= constant.language
}
.command : style {
	color			= #89ddff
	italic			= true
	textmate_scope	= keyword.control
}
.command_arg : style {
	color			= #FFCB6B
	textmate_scope	= entity.name
}
.identifier : style {
	color			= #EEFFFF
	textmate_scope	= variable
	ace_scope       = identifier
}
.namespace : style {
	color			= #82AAFF
	textmate_scope	= entity.name
}
.parameter : style {
	color			= #F78C6C
	textmate_scope	= variable.parameter
}
.function : style {
	color			= #82AAFF
	textmate_scope	= entity.name.function
	ace_scope       = identifier
	//support.function
}
.numeric : style {
	color			= #F78C6C
	textmate_scope	= constant.numeric
}
.punctuation : style {
	color			= #89DDFF
	textmate_scope	= punctuation
}
.text : style {
	color			= #C3E88D
	textmate_scope	= string
}
.escape_char : style {
	color			= #89DDFF
	textmate_scope	= constant.character.escape
}
.bool : style {
	color			= #F78C6C
	textmate_scope	= constant.language
}
.modifier : style {
	color			= #C792EA
	textmate_scope	= storage.modifier
}
.type : style {
	color			= #C792EA
	textmate_scope	= storage.type
}
.type_primitive : style {
	color			= #C792EA
	textmate_scope	= storage.type.primitive
}
.self : style {
	color			= #FF5370
	textmate_scope	= variable.language
	italic			= true
}
.special_name : style {
	color			= #B2CCD6
	textmate_scope	= support.type
}

}
